/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReviewTire } from './ReviewTire';
import {
    ReviewTireFromJSON,
    ReviewTireFromJSONTyped,
    ReviewTireToJSON,
} from './ReviewTire';

/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    readonly id?: number;
    /**
     * 
     * @type {ReviewTire}
     * @memberof Review
     */
    tire?: ReviewTire;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    tireId: number;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    nickname: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    phoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    content: string;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    rating: number;
    /**
     * 
     * @type {Blob}
     * @memberof Review
     */
    image?: Blob | null;
    /**
     * 
     * @type {Date}
     * @memberof Review
     */
    readonly created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Review
     */
    readonly modified?: Date;
}

/**
 * Check if a given object implements the Review interface.
 */
export function instanceOfReview(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tireId" in value;
    isInstance = isInstance && "nickname" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "rating" in value;

    return isInstance;
}

export function ReviewFromJSON(json: any): Review {
    return ReviewFromJSONTyped(json, false);
}

export function ReviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): Review {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tire': !exists(json, 'tire') ? undefined : ReviewTireFromJSON(json['tire']),
        'tireId': json['tire_id'],
        'nickname': json['nickname'],
        'password': json['password'],
        'phoneNumber': json['phone_number'],
        'title': json['title'],
        'content': json['content'],
        'rating': json['rating'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'modified': !exists(json, 'modified') ? undefined : (new Date(json['modified'])),
    };
}

export function ReviewToJSON(value?: Review | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tire': ReviewTireToJSON(value.tire),
        'tire_id': value.tireId,
        'nickname': value.nickname,
        'password': value.password,
        'phone_number': value.phoneNumber,
        'title': value.title,
        'content': value.content,
        'rating': value.rating,
        'image': value.image,
    };
}

