/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Car, Review, Store, Tire, TireManufacturer } from "../models";
import {
  CarFromJSON,
  CarToJSON,
  ReviewFromJSON,
  ReviewToJSON,
  StoreFromJSON,
  StoreToJSON,
  TireFromJSON,
  TireToJSON,
  TireManufacturerFromJSON,
  TireManufacturerToJSON,
} from "../models";

export interface CreateReviewRequest {
  review?: Review;
}

export interface RetrieveCarRequest {
  id: string;
}

export interface RetrieveReviewRequest {
  id: string;
}

export interface RetrieveStoreRequest {
  id: string;
}

export interface RetrieveTireRequest {
  id: string;
}

export interface RetrieveTireManufacturerRequest {
  id: string;
}

/**
 *
 */
export class ApiApi extends runtime.BaseAPI {
  /**
   *
   */
  async createReviewRaw(
    requestParameters: CreateReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "multipart/form-data";

    const response = await this.request(
      {
        path: `/api/v1/reviews/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReviewToJSON(requestParameters.review),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async createReview(
    requestParameters: CreateReviewRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.createReviewRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async listCarsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Car>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/cars/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CarFromJSON)
    );
  }

  /**
   *
   */
  async listCars(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Car>> {
    const response = await this.listCarsRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async listReviewsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/reviews/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReviewFromJSON)
    );
  }

  /**
   *
   */
  async listReviews(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Review>> {
    const response = await this.listReviewsRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async listStoresRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Store>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/stores/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(StoreFromJSON)
    );
  }

  /**
   *
   */
  async listStores(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Store>> {
    const response = await this.listStoresRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async listTireManufacturersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TireManufacturer>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tire-manufacturers/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TireManufacturerFromJSON)
    );
  }

  /**
   *
   */
  async listTireManufacturers(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TireManufacturer>> {
    const response = await this.listTireManufacturersRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async listTiresRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Tire>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tires/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TireFromJSON)
    );
  }

  /**
   *
   */
  async listTires(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Tire>> {
    const response = await this.listTiresRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async retrieveCarRaw(
    requestParameters: RetrieveCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Car>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling retrieveCar."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/cars/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CarFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveCar(
    requestParameters: RetrieveCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Car> {
    const response = await this.retrieveCarRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async retrieveReviewRaw(
    requestParameters: RetrieveReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling retrieveReview."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/reviews/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveReview(
    requestParameters: RetrieveReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.retrieveReviewRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async retrieveStoreRaw(
    requestParameters: RetrieveStoreRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Store>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling retrieveStore."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/stores/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StoreFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveStore(
    requestParameters: RetrieveStoreRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Store> {
    const response = await this.retrieveStoreRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async retrieveTireRaw(
    requestParameters: RetrieveTireRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tire>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling retrieveTire."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tires/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TireFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveTire(
    requestParameters: RetrieveTireRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tire> {
    const response = await this.retrieveTireRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async retrieveTireManufacturerRaw(
    requestParameters: RetrieveTireManufacturerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TireManufacturer>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling retrieveTireManufacturer."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tire-manufacturers/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TireManufacturerFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveTireManufacturer(
    requestParameters: RetrieveTireManufacturerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TireManufacturer> {
    const response = await this.retrieveTireManufacturerRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
